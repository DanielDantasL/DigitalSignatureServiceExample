@page "/genKeys"
@using BlazorDownloadFile
@using DigitalSignWebService.Data
@using System.Security.Cryptography
@using System.IO
@using System.Security.Cryptography.X509Certificates
@using X509Certificate = Org.BouncyCastle.X509.X509Certificate;


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Generate Keys</MudText>
    <MudGrid Class="my-2">
        <MudItem xs="6" sm="6" md="4">
            <MudSelect Label="Algorithm" @bind-Value="AsymmetricKeyGenAlgorithm" Strict="true" Variant="Variant.Outlined" Format="F2">
                @foreach (CryptoUtils.AsymmetricKeyGenAlgorithm item in Enum.GetValues(typeof(CryptoUtils.AsymmetricKeyGenAlgorithm))) {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6" sm="6" md="4">
            <MudSelect Label="Key Size" @bind-Value="KeySize" Strict="true" Variant="Variant.Outlined" Format="F2" ToStringFunc="_keySizeToString">
                @foreach (CryptoUtils.KeySize item in Enum.GetValues(typeof(CryptoUtils.KeySize))) {
                    <MudSelectItem Value="@item"></MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="GenerateKeyPair" Class="my-2">Generate Key Pair</MudButton>
    <MudGrid Class="my-2">
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Public Key</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@PublicKey</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Disabled="@(_rsa == null)" @onclick="() => SaveTextInFile(PublicKey, PublicKeyFileName)">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="6">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Private Key</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>@PrivateKey</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Disabled="@(_rsa == null)" @onclick="() => SaveTextInFile(PrivateKey, PrivateKeyFileName)">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
        private const string PublicKeyFileName = "public-key.pem";
        private const string PrivateKeyFileName = "private-key.pem";

    private CryptoUtils.KeySize KeySize { get; set; } = CryptoUtils.KeySize.Bits512;
    private CryptoUtils.AsymmetricKeyGenAlgorithm AsymmetricKeyGenAlgorithm { get; set; } = CryptoUtils.AsymmetricKeyGenAlgorithm.RSA;

    private string PublicKey { get; set; }
    private string PrivateKey { get; set; }

    [Inject]
    IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    private RSA _rsa;

    private X509Certificate2 _certificate;

    private void GenerateKeyPair() {
        // var caPrivKey = CryptoUtils.GenerateCACertificate("CN=root ca");
        _certificate = CryptoUtils.GenerateSelfSignedCertificate(AsymmetricKeyGenAlgorithm, (int)KeySize, "CN=127.0.01", out var privateKeyInfo);
        PublicKey = _certificate.GetPublicKeyString();
        PrivateKey = privateKeyInfo.GetDerEncoded().ToString();

    // _certificate = CryptoUtils.GenerateSelfSignedCertificate(AsymmetricKeyGenAlgorithm, 1024, "subjectDN", "issuerDN", out var privateKey);
    //
    //
    // PublicKey = _certificate.GetPublicKeyString();
    // // PrivateKey = _certificate.PrivateKey?.ToString();
    // PrivateKey = _certificate.PrivateKey?.ToString();


    // CryptoUtils.AddCertToStore(_certificate, StoreName.My, StoreLocation.CurrentUser);
    //
    // try {
    //     _rsa = RSA.Create((int) KeySize);
    // } catch (Exception e) {
    //     Console.WriteLine(e);
    //     return;
    // }
    //
    // var stringWriter = new StringWriter();
    //
    // // write public key
    // CryptoUtils.ExportPublicKey(_rsa, stringWriter);
    // PublicKey = stringWriter.ToString();
    //
    // // reset writer
    // stringWriter.GetStringBuilder().Length = 0;
    //
    // CryptoUtils.ExportPrivateKey(_rsa, stringWriter);
    // PrivateKey = stringWriter.ToString();
    }

    private void SaveTextInFile(string content, string fileName) {
        BlazorDownloadFileService.DownloadFileFromText(fileName, content, contentType: "text/plain", encoderShouldEmitUTF8Identifier: false);
    }

    private readonly Func<CryptoUtils.KeySize, string> _keySizeToString = ks => $"{(int) ks} Bits";

}