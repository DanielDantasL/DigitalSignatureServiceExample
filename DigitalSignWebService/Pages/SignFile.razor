@page "/sign"
@using Org.BouncyCastle.Crypto
@using DigitalSignWebService.Data
@using Org.BouncyCastle.OpenSsl
@using System.IO

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Upload and Sign Files</MudText>
    <MudGrid Class="my-2">
        <MudItem xs="6" sm="6" md="12">
            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple/>

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload Files
            </MudButton>
        </MudItem>
        <MudItem xs="6" sm="6" md="12">
            @if (files != null) {
                <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                <MudList>
                    @foreach (var signableFile in files) {
                        <MudGrid Class="my-2">
                            <MudItem xs="3">
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@signableFile">
                                    @signableFile.File.Name <br>
                                    (<code>@(signableFile.File.Size / 1024) KBytes</code>)
                                </MudListItem>

                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect Label="Algorithm" @bind-Value="@signableFile.SignatureAlgorithm" Strict="true" Variant="Variant.Outlined" Format="F2">
                                    @foreach (CryptoUtils.SignatureAlgorithm item in Enum.GetValues(typeof(CryptoUtils.SignatureAlgorithm))) {
                                        <MudSelectItem Value="@item">@item</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <InputFile id="privateKeyFile" OnChange="@((args) => SignFileWithKey(args, signableFile))" hidden multiple/>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Filled.HistoryEdu"
                                           for="privateKeyFile">
                                    Sign
                                </MudButton>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Success"
                                           StartIcon="@Icons.Filled.FileDownload"
                                           for="fileInput">
                                    Download
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                </MudList>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{


    // IList<IBrowserFile> files = new List<IBrowserFile>();
    IList<CryptoUtils.BrowserSignableFile> files = new List<CryptoUtils.BrowserSignableFile>();

    private void UploadFiles(InputFileChangeEventArgs e) {
        foreach (var file in e.GetMultipleFiles()) {
            files.Add(new CryptoUtils.BrowserSignableFile(file));
        }
    //TODO upload the files to the server
    }

    private void SignFileWithKey(CryptoUtils.ISignableFile file, AsymmetricKeyParameter privateKey) {
    // TODO: store signature to be downloaded
        // var signature = CryptoUtils.SignFile(file, privateKey);
    }

    private void SignFileWithKey(InputFileChangeEventArgs e, CryptoUtils.BrowserSignableFile file) {
        if (e.File.ContentType == "application/x-pem-file") {
            // .pem file
            var certFile = e.File;
            var certData = new byte[certFile.Size];
            certFile.OpenReadStream().ReadAsync(certData, 0, (int) certFile.Size);

            // var reader = new StringReader();
            // TextReader tr = new StreamReader(Path);
            // PemReader pr = new PemReader(tr);
            // AsymmetricKeyParameter Key = (AsymmetricKeyParameter)pr.ReadObject();
            // pr.Reader.Close();
            // tr.Close();
            // return Key;
            
            // var pemReader = new PemReader();
            // pemReader.ReadPemObject().
            // TODO: read file with PemReader
            // -> CryptoUtils.SignFile()
            // file.SetSignature
            
            
            // file.SetSignature(); 
            // BlazorDownloadFileService.DownloadFileFromText(fileName, GetPrivateKey(), contentType: "application/x-pem-file", encoderShouldEmitUTF8Identifier: false);
        }
    }
}